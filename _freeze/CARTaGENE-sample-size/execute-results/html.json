{
  "hash": "354ce79854c2dcba36cd38532e3c5097",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"CartaGene Sample Size estimation\"\n---\n\n\n\n\n\n\n## Setup for statistical power analyses\n\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## data wrangling and visualisations\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(flextable)\n## Required for code linking\nlibrary(downlit)\nlibrary(xml2)\n\n## Report automated QCs for VCF files\nlibrary(vcfR)\n```\n:::\n\n\n\n\n\n\n## VCF files Reporting with `vcfR` {#sec-vcfr}\n\n### Load VCF files\n\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nvcf_file <- \"./data/variants/chr17.HDAC5.vcf\"\nvcf <- vcfR::read.vcfR(vcf_file)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` code_output\n##  Scanning file to determine attributes.\n##  File attributes:\n##    meta lines: 24\n##    header_line: 25\n##    variant count: 91\n##    column count: 29346\n##  \nMeta line 24 read in.\n##  All meta lines processed.\n##  gt matrix initialized.\n##  Character matrix gt created.\n##    Character matrix gt rows: 91\n##    Character matrix gt cols: 29346\n##    skip: 0\n##    nrows: 91\n##    row_num: 0\n##  \nProcessed variant: 91\n##  All variants processed\n```\n\n\n:::\n\n```{.r .cell-code}\nchrom <- vcfR::create.chromR(name = \"Supercontig\", vcf = vcf) |> \n  # removing low quality variants, none of these metrics is reported\n  # vcfR::masker(min_QUAL = 0, min_DP = 350, max_DP = 650, \n  #              min_MQ = 59.5, max_MQ = 60.5) |> \n  vcfR::proc.chromR(win.size = 1e2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n##  Names in vcf:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n##    chr17\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n##  Initializing var.info slot.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n##  var.info slot initialized.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n##  Warning in vcfR::proc.chromR(vcfR::create.chromR(name = \"Supercontig\", vcf =\n##  vcf), : seq slot is NULL.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n##  Warning in vcfR::proc.chromR(vcfR::create.chromR(name = \"Supercontig\", vcf =\n##  vcf), : annotation slot has no rows.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n##  Warning in vcfR::proc.chromR(vcfR::create.chromR(name = \"Supercontig\", vcf =\n##  vcf), : seq slot is NULL, chromosome representation not made (seq2rects).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n##  Warning in vcfR::proc.chromR(vcfR::create.chromR(name = \"Supercontig\", vcf =\n##  vcf), : seq slot is NULL, chromosome representation not made (seq2rects,\n##  chars=n).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n##  Population summary complete.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n##    elapsed time:  2.685\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n##  window_init complete.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n##    elapsed time:  0.019\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n##  Warning in vcfR::proc.chromR(vcfR::create.chromR(name = \"Supercontig\", vcf =\n##  vcf), : seq slot is NULL, windowize_fasta not run.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n##  Warning in vcfR::proc.chromR(vcfR::create.chromR(name = \"Supercontig\", vcf =\n##  vcf), : ann slot has zero rows.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n##  windowize_variants complete.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n##    elapsed time:  0.014\n```\n\n\n:::\n:::\n\n\n\n\n\n\n### VCF files QC\n\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nvcfR::chromoqc(chrom, dp.alpha = 22,\n               xlim = c(min(chrom@var.info$POS), max(chrom@var.info$POS)))\n\nplot(chrom)\n```\n\n::: {.cell-output-display}\n![](CARTaGENE-sample-size_files/figure-html/fig-plot-qc-per-chrom-1.png){#fig-plot-qc-per-chrom-1 fig-align='center' width=672}\n:::\n\n::: {.cell-output-display}\n![](CARTaGENE-sample-size_files/figure-html/fig-plot-qc-per-chrom-2.png){#fig-plot-qc-per-chrom-2 fig-align='center' width=672}\n:::\n:::\n\n\n\n\n\n\n- In vcfR we refer to this form of plot as a chromo plot. This plot summarizes data from our three data sources. Annotation data is represented on the lowest plot. Features in the annotation file (e.g., gene models, exons, etc.) are represented as dark red rectangles. Above the annotation track is a sequence track. Here called nucleotides are represented in green while uncalled nucleotides (Ns) appear in red. Depending on the quality of your genome, it may include stretches of uncalled nucleotides. Above the annotation track is a windowing analysis of G/C content. This track includes marginal barplots to summarize its contents, as do the tracks above it. The next track summarizes the number of variants per window. Above that we see dot plots for quality, mapping quality and read depth.\n\n- The raw read depth and mapping quality have been extracted from the INFO column of the VCF data. The quality is from the QUAL column of the VCF data. And the variant count per window was summarized during the windowing analysis performed by proc.chromR(). The raw read depth appears fairly continuous, an observation which appears consistent with the above chromo plots. Mapping quality appears to be predominantly one value (about 60), this may not have been apparent in the chromo plots. The variant count per window summarizes the degree of variability we’ve observed along our chromosome. The peak near zero indicates that many windows lack variants\n\n\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nvcf_tidy <- vcfR::vcfR2tidy(vcf)\n\nvcfR::vcf_field_names(vcf, tag = \"INFO\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` code_output\n##  # A tibble: 3 × 5\n##    Tag   ID         Number Type  Description                         \n##    <chr> <chr>      <chr>  <chr> <chr>                               \n##  1 INFO  IMPUTED    0      Flag  Marker was imputed but NOT genotyped\n##  2 INFO  TYPED      0      Flag  Marker was genotyped AND imputed    \n##  3 INFO  TYPED_ONLY 0      Flag  Marker was genotyped but NOT imputed\n```\n\n\n:::\n\n```{.r .cell-code}\nvcfR::vcf_field_names(vcf, tag = \"FORMAT\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` code_output\n##  # A tibble: 4 × 5\n##    Tag    ID    Number Type   Description                                     \n##    <chr>  <chr> <chr>  <chr>  <chr>                                           \n##  1 FORMAT GT    1      String Genotype                                        \n##  2 FORMAT DS    1      Float  Estimated Alternate Allele Dosage : [P(0/1)+2*P…\n##  3 FORMAT HDS   2      Float  Estimated Haploid Alternate Allele Dosage       \n##  4 FORMAT GP    3      Float  Estimated Posterior Probabilities for Genotypes…\n```\n\n\n:::\n\n```{.r .cell-code}\ntest <- table(vcf_tidy$fix$TYPED_ONLY)\n```\n:::\n\n\n\n\n\n\n\n\nhttps://knausb.github.io/vcfR_documentation/visualization_1.html\n\n\n## VCF Files QC with `VariantAnnotation`\n\n- [`VariantAnnotation` provides more comprehensive features with respect to @sec-vcfr, yet, relies on external dependencies such as `bfctools`, and often faces memory limitations.]{fg=\"red\"}\n\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nvcf <- VariantAnnotation::readVcf(file = \"./data/variants/chr6.HLA-A.vcf\", \n                                  genome = \"hg38\")\n\n# General vcf file structure ----\n\nVariantAnnotation::header(vcf)\nVariantAnnotation::samples(VariantAnnotation::header(vcf))\nVariantAnnotation::geno(VariantAnnotation::header(vcf))\n\n# Variant-specific fields, such as alternative allele configurations\nVariantAnnotation::alt(vcf)[1:5]\n```\n:::\n\n\n\n\n\n\n## Additional resources\n\n- [`FreeBayes` variant calling workflow for DNA-Seq](https://bioinformaticsworkbook.org/dataAnalysis/VariantCalling/freebayes-dnaseq-workflow.html) is able to detect from scratch small polymorphisms, such as *SNPs* (single-nucleotide polymorphisms), *indels* (insertions and deletions), and *MNPs* (multi-nucleotide polymorphisms):\n\n  - Provides as well a comprehensive tutorial for retrieving variants annotations.\n  - QC plots with the `vcfR` package.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}