---
title: "CartaGene Sample Size estimation"
---

## Setup for statistical power analyses

```{r}
#| label: setup
## data wrangling and visualisations
library(dplyr)
library(ggplot2)
library(flextable)
## Required for code linking
library(downlit)
library(xml2)

## Report automated QCs for VCF files
library(vcfR)

# Sample size estimation
library(genpwr)
```

## VCF files Reporting with `vcfR` {#sec-vcfr}

### Load VCF files

```{r}
#| label: vcf-file-load
#| message: true
#| warning: true
#| cache: false

# vcf_file <- "./data/variants/chr17.HDAC5.vcf"
vcf_file <- "./data/variants/chr7.HDAC9.vcf"
vcf <- vcfR::read.vcfR(vcf_file)


chrom <- vcfR::create.chromR(name = "Supercontig", vcf = vcf) |> 
  # removing low quality variants, none of these metrics is reported
  # vcfR::masker(min_QUAL = 0, min_DP = 350, max_DP = 650, 
  #              min_MQ = 59.5, max_MQ = 60.5) |> 
  vcfR::proc.chromR(win.size = 1e4)

```

### VCF files QC

```{r}
#| label: fig-plot-qc-per-chrom
#| fig-cap: "Quality control per chrosomsome, for a given variant."
vcfR::chromoqc(chrom, dp.alpha = 22,
               xlim = c(min(chrom@var.info$POS), max(chrom@var.info$POS)))

plot(chrom)
```

@fig-plot-qc-per-chrom is a **chromo plot**:

- **Annotation data** on the lowest plot. Features in the annotation file (e.g., gene models, exons, etc.) are represented as dark red rectangles.
- Above is a **sequence track**, with [nucleotides in green]{fg="green"} while [uncalled nucleotides are in red]{fg="red"}. 
- Last track summarizes the number of variants per window. Above that we see dot plots for quality, mapping quality and read depth. 
- Generated with [Visualizing VCF data 1](https://knausb.github.io/vcfR_documentation/visualization_1.html)

### MAF histogram distribution

Main [`tidy vcfR`](https://knausb.github.io/vcfR_documentation/tidy_vcfR.html) instructions.

```{r}
#| label: tbl-vcf-tidy-format
#| tbl-cap: "VCF annotations and descriptions."
#| tbl-subcap:
#|   - "Imputed SNPs metadata"
#|   - "Header `FORMAT` and Description for the VCF file."
#| layout-ncol: 2
#| cache: false

vcf_tidy <- vcfR::vcfR2tidy(vcf)
vcfR::vcf_field_names(vcf, tag = "INFO")
vcfR::vcf_field_names(vcf, tag = "FORMAT")

```



**Minor allele frequency (MAF)** for a given variant can be computed from **DS (Estimated Alternate Allele Dosage)**, **HDS (Haploid Dosage)**, or **GP** (Posterior Probabilities for Genotypes), as reported in @tbl-MAF-formula, and the corresponding MAF tables and abundancies are reported in @tbl-MAF-estimation.

::: {#tip-MAF .callout-tip title="Computation of the MAF score" collapse="true"}

| Source | How to compute AF | Then MAF |
|:--------|:--------------------|:------------|
| DS | $\frac{\sum DS}{2N}$ | $\min(AF, 1-AF)$ |
| HDS | $\frac{\sum HDS}{2N}$ | $\min(AF, 1-AF)$ |
| GP | $\frac{\sum (P(0/1) + 2 \times P(1/1))}{2N}$ | $\min(AF, 1-AF)$ |

: Infer MAF formulas {#tbl-MAF-formula}

:::



```{r}
#| label: tbl-MAF-estimation
#| tbl-subcap:
#|   - "Result from calling the `vcfR::maf` function on a `vcf`object. The `row.names` report the ID of the mutation (`chromosome:position:SNP`), the first column the total number of alleles identified in the cohort, the third is the count and fourth the frequency (you have to divide by 2 the `Counts` with diploid organisms)."
#|   - "Header `FORMAT` and Description for the VCF file."
#| layout-ncol: 2

vcf_variants_counts <- vcf_tidy$gt
N_indiv <- length(unique(vcf_variants_counts$Indiv))

# Compute MAF from  DS (Estimated Alternate Allele Dosage)
vcf_maf_distributions <- vcf_variants_counts |> 
  dplyr::group_by(POS) |> 
  dplyr::summarise(AF  = sum(gt_DS, na.rm = TRUE) / (2 * n()), # alternate allele frequency
    MAF = pmin(AF, 1 - AF), .groups = "drop")   # minor allele frequency

# alternative computation, similar outputs (by default, return the minor allele)
vcf_maf_distributions_alt <- vcfR::maf(vcf, element = 2) |> 
  tibble::as_tibble(rownames = "SNP_ID")

flextable(head(vcf_maf_distributions_alt)) |> 
  bold(part = "header") 

flextable(vcf_maf_distributions |> 
  select(POS, MAF) |> 
  arrange(-MAF) |> 
  head()) |> 
  flextable::bold(part = "header")
```

```{r}
#| label: fig-MAF-distribution
#| fig-cap: "Distribution of MAF (minor allele frequency values)"

ggplot(vcf_maf_distributions, aes(x = MAF)) +
  geom_histogram(binwidth = 0.02) +
  geom_density(adjust = 0.5, linewidth = 2, col = "red") +
  scale_x_continuous(breaks = seq(0, 1, by = 0.05), limits = c(0, 0.5)) +
  theme_minimal()

```


<!-- ## VCF Files QC with `VariantAnnotation` -->

<!-- - [`VariantAnnotation` provides more comprehensive features with respect to @sec-vcfr, yet, relies on external dependencies such as `bfctools`, and often faces memory limitations.]{fg="red"} -->

<!-- ```{r} -->
<!-- #| label: read-vcf-file -->
<!-- #| eval: false -->
<!-- #| echo: true -->

<!-- vcf <- VariantAnnotation::readVcf(file = "./data/variants/chr6.HLA-A.vcf",  -->
<!--                                   genome = "hg38") -->

<!-- # General vcf file structure ---- -->

<!-- VariantAnnotation::header(vcf) -->
<!-- VariantAnnotation::samples(VariantAnnotation::header(vcf)) -->
<!-- VariantAnnotation::geno(VariantAnnotation::header(vcf)) -->

<!-- # Variant-specific fields, such as alternative allele configurations -->
<!-- VariantAnnotation::alt(vcf)[1:5] -->
<!-- ``` -->

## Sample Size Calculation {#sec-sample-size}

- [Sample Size Calculation in Genetic Association Studies: A Practical Approach](https://pmc.ncbi.nlm.nih.gov/articles/PMC9863799/#sec5-life-13-00235), from @politi2023l, notably listing the following tools:

  - [`GENPWR`: Power and Sample Size Calculations for Genetic Association Studies in the Presence of Genetic Model Mis-Specification](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7666027/), from @moore2019hh and available as a [R package](https://cran.r-project.org/web/packages/genpwr/vignettes/vignette.html), is able to compute the sample size for dichotomous or continuous outcomes in gene-only studies, implementing additive, dominant and recessive models (see @tip-genetic-model for details). Report to @sec-GENPWR for a practical illustration.  
  
  - [`PGA`: Power for Genetic Association](https://pmc.ncbi.nlm.nih.gov/articles/PMC2387159/), from @menashe2008bg is able to adjust for **multiple comparisons**, in contrast with `GENPWR`, and LD between the marker and the disease allele. [Seems not available anymore]{fg="red"}
  
::: {#tip-genetic-model .callout-tip title="Genetic models"}

- **Genotype**: At a given SNP with alleles **A** (major) and **a** (minor), the genotypes are:

  - **AA** (homozygous *major*)
  - **Aa** (*heterozygous*)
  - **aa** (homozygous *minor*)

- **Phenotype**: A continuous or binary outcome (e.g., height, disease status)

- **Notations**: $Y$: phenotype, $G$: genotype, $\beta$: effect size, $X$: covariates (e.g., age, sex, PCs) and $\epsilon$: error term.

--- 

ðŸ§¬ Genetic Models in GWAS

- **Additive model**: in @eq-genetic-model, 'gene cat' is converted as `AA = 0`, `Aa = 1` and `aa = 2`. Each additional copy of the minor allele increases the trait linearly.

- **Dominant model**: in @eq-genetic-model, 'gene cat' is converted as `AA = 0`, `Aa = 1` and `aa = 1`. Presence of **at least one** minor allele confers full effect (no dose response).

- **Recessive model**: in @eq-genetic-model, 'gene cat' is converted as `AA = 0`, `Aa = 0` and `aa = 1`. Only **homozygous minor** genotype has an effect.

$$
Y = \beta_0 + \beta_1 G_{\text{gene cat}} + \beta_2 X + \epsilon
$$ {#eq-genetic-model}

---

| Model     | Coding        | Assumes effect from        | Pros                                | Cons                                |
|-----------|---------------|-----------------------------|-------------------------------------|-------------------------------------|
| Additive  | 0 / 1 / 2     | Per additional allele       | High power, interpretable           | May miss non-linear effects         |
| Dominant  | 0 / 1 / 1     | Any copy of minor allele    | Fits some Mendelian patterns        | Oversimplifies if dose-response     |
| Recessive | 0 / 0 / 1     | Two copies of minor allele  | Fits true recessive traits          | Low power with rare alleles         |

: Main Genetic Models. In conclusion, use **additive** by default (most comprehensive), and explore **dominant/recessive** in **post-GWAS** or when you have strong biological priors (e.g., loss-of-function){#tbl-genetic-model}

---

Other less Frequent Models include **Overdominant**, in which the effect only occurs in **heterozygotes**. Rarely used in GWAS, but relevant for **heterozygous** scenarios (e.g., sickle cell and malaria).

:::

### `GENPWR` Sample Size estimation {#sec-GENPWR}

- [Noted out some bugs for `GENPWR` in extreme scenarios, like negative estimation of sample sizes, or sample sizes not increasing monotonically with decreasing $p-$ value.]{fg="red"}

- @fadista2016ejhg estimates the following thresholds: 

  - $5 \times 10^{âˆ’8}$ $p$-value threshold for WGS for common genetic variations in the European population ($\text{MAF} \ge 5 \%$). 
  - $3 Ã— 10^{âˆ’8}$ for $\text{MAF} \ge 1 \%$
  - $1 Ã— 10^âˆ’8$ for rare variants with $\text{MAF} \ge 0.1 \%$. 
  - From the **Conclusion section**, for WES, it turns out that these thresholds can be softened by several orders of magnitude.
  
- @david2021tig determines that: 

  - The odds-ratio was on average below 2 for frequent variants. 
  - And around 4 for rare variants, $\text{MAF} < 0.1$

- `2df`stands for two degrees of freedom, in other words, when no inheritance model is assumed. 

- [By default, it's the **additive test**, the least powerful, but also the most flexible, which is performed when running `plink2`.]{fg="red"}



```{r}
#| label: compute-summary-stats

cartagene_phenodata <- readr::read_tsv("data/phenotypes/merge_phenos_PCs.txt", 
                                       show_col_types = FALSE)

num_features <- 9
num_variants <- nrow(vcf_tidy$fix)
  
case_rate_tbl <- table(cartagene_phenodata$OSTEOPONIA)
case_rate <- stats::setNames(case_rate_tbl, names(case_rate_tbl))
case_rate <- case_rate_tbl["2"]/sum(case_rate)
case_rate <- case_rate[["2"]]
```

::: {.panel-tabset}

#### Without adjustement

```{r}
#| label: fig-GENPWR-unadjusted
#| fig-cap: "Without any adjustement, to be avoided." 
#| message: true
#| fig-subcap:
#|   - "Odds ratio of 2"
#|   - "Odds ratio of 3"
#|   - "Odds ratio of 4"
#| layout-ncol: 3

pval_free <- 0.05
ss_not_adjusted <- genpwr.calc(calc = "ss",
                  model = "logistic", 
                  ge.interaction = NULL,
                  OR = c(2, 3, 4), 
                  Case.Rate = case_rate, 
                  Power = 0.8,
                  MAF = c(0.01, 0.02, 0.05, 0.10, 0.3), 
                  Alpha = pval_free,
                  True.Model = "All", 
                  Test.Model = c("Additive"))

ss.plot(ss_not_adjusted)

ss_not_adjusted <- ss_not_adjusted |> 
  rename_with( ~ "Pval",
               .cols = starts_with("N_total_at_Alpha"))

best_scenario <- ss_not_adjusted |> 
  filter(Pval == min(Pval)) |>
  pull(Pval) |> ceiling()

intermediate_scenario <- ss_not_adjusted |> 
  filter(True.Model == "Additive"  & MAF == 0.05 & OR == 3) |> 
  pull(Pval) |> ceiling()

worst_scenario <- ss_not_adjusted |> 
  filter(Pval == max(Pval)) |> 
  pull(Pval) |> ceiling() |> 
  formatC(format = "d", big.mark = ",")

message(paste("Most optimistic scenario (MAF: 0.3, OR: 4, Real:Recessive vs Tested:Additive) needs ", best_scenario, "samples.\n", 
              "Intermediate scenario (MAF: 0.05, OR: 3, Real:Additive vs Tested:Additive) needs", intermediate_scenario, "samples.\n", 
              "Finally, the worst scenario (MAF: 0.01, OR: 2, Real:Recessive vs Tested:Additive) needs", worst_scenario, "samples."))

```

#### Adjustement specific to the gene

```{r}
#| label: fig-GENPWR-gene-specific
#| fig-cap: With an $\alpha$-threshold adjusted to the gene-candidate context.
#| message: true
#| fig-subcap:
#|   - "Odds ratio of 2"
#|   - "Odds ratio of 3"
#|   - "Odds ratio of 4"
#| layout-ncol: 3

pval_adjusted_gene_specific <- 0.05/(num_variants*num_features)
ss_gene <- genpwr.calc(calc = "ss",
                  model = "logistic", 
                  ge.interaction = NULL,
                  OR = c(2, 3, 4), 
                  Case.Rate = case_rate, 
                  Power = 0.8,
                  MAF = c(0.01, 0.02, 0.05, 0.10, 0.3), 
                  Alpha = pval_adjusted_gene_specific,
                  True.Model = "All", 
                  Test.Model = c("Additive"))

ss.plot(ss_gene)

ss_gene <- ss_gene |> 
  rename_with( ~ "Pval",
               .cols = starts_with("N_total_at_Alpha"))

best_scenario <- ss_gene |> 
  filter(Pval == min(Pval)) |>
  pull(Pval) |> ceiling()

intermediate_scenario <- ss_gene |> 
  filter(True.Model == "Additive"  & MAF == 0.05 & OR == 3) |> 
  pull(Pval) |> ceiling()

worst_scenario <- ss_gene |> 
  filter(Pval == max(Pval)) |> 
  pull(Pval) |> ceiling() |> 
  formatC(format = "d", big.mark = ",")

message(paste("Most optimistic scenario (MAF: 0.3, OR: 4, Real:Recessive vs Tested:Additive) needs ", best_scenario, "samples.\n", 
              "Intermediate scenario (MAF: 0.05, OR: 3, Real:Additive vs Tested:Additive) needs", intermediate_scenario, "samples.\n", 
              "Finally, the worst scenario (MAF: 0.01, OR: 2, Real:Recessive vs Tested:Additive) needs", worst_scenario, "samples."))

```
#### Recommended GWAS adjustement

```{r}
#| label: fig-GENPWR-GWAS
#| fig-cap: With an $\alpha$-threshold of $5 \times 10^{-8}$.
#| message: true
#| fig-subcap:
#|   - "Odds ratio of 2"
#|   - "Odds ratio of 3"
#|   - "Odds ratio of 4"
#| layout-ncol: 3

pval_adjusted_gwas <- 5 * 10^-8
ss_GWAS <- genpwr.calc(calc = "ss",
                  model = "logistic", 
                  ge.interaction = NULL,
                  OR = c(2, 3, 4), 
                  Case.Rate = 0.1, 
                  Power = 0.8,
                  MAF = c(0.01, 0.02, 0.05, 0.10, 0.3), 
                  Alpha = pval_adjusted_gwas,
                  True.Model = "All", 
                  Test.Model = c("Additive"))

ss.plot(ss_GWAS)

ss_GWAS <- ss_GWAS |> 
  rename_with( ~ "Pval",
               .cols = starts_with("N_total_at_Alpha"))

best_scenario <- ss_GWAS |> 
  filter(Pval == min(Pval)) |>
  pull(Pval) |> ceiling()

intermediate_scenario <- ss_GWAS |> 
  filter(True.Model == "Additive"  & MAF == 0.05 & OR == 3) |> 
  pull(Pval) |> ceiling() |> 
  formatC(format = "d", big.mark = ",")

worst_scenario <- ss_GWAS |> 
  filter(Pval == max(Pval)) |> 
  pull(Pval) |> ceiling() |> 
  formatC(format = "d", big.mark = ",")

message(paste("Most optimistic scenario (MAF: 0.3, OR: 4, Real:Recessive vs Tested:Additive) needs ", best_scenario, "samples.\n", 
              "Intermediate scenario (MAF: 0.05, OR: 3, Real:Additive vs Tested:Additive) needs", intermediate_scenario, "samples.\n", 
              "Finally, the worst scenario (MAF: 0.01, OR: 2, Real:Recessive vs Tested:Additive) needs", worst_scenario, "samples."))
```

:::

## Additional resources {.appendix}

- [`FreeBayes` variant calling workflow for DNA-Seq](https://bioinformaticsworkbook.org/dataAnalysis/VariantCalling/freebayes-dnaseq-workflow.html) for detecting from scratch small polymorphisms, such as *SNPs* (single-nucleotide polymorphisms), *indels* (insertions and deletions), and *MNPs* (multi-nucleotide polymorphisms):

  - Provides as well a comprehensive tutorial for retrieving variants annotations.
  
  - QC plots with the `vcfR` package.

